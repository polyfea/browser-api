/* tslint:disable */
/* eslint-disable */
/**
 * Polyfea Browser application
 * This is the OpenAPI definition for the Polyfea endpoint serving the context information to the browser client. The client is requesting context information from the backend typically  when approaching the `<polyfea-context>` element. The context information is then used to render the UI of the application. 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ContextArea,
  StaticConfig,
} from '../models/index';
import {
    ContextAreaFromJSON,
    ContextAreaToJSON,
    StaticConfigFromJSON,
    StaticConfigToJSON,
} from '../models/index';

export interface GetContextAreaRequest {
    name: string;
    path: string;
    take?: number;
}

/**
 * 
 */
export class PolyfeaApi extends runtime.BaseAPI {

    /**
     * Get the context area information. Context area information includes elements and microfrontneds needed for that elements. Actual content is depending on the path - provided as an input  and the user  role determined on the server side. 
     * Get the context area information. 
     */
    async getContextAreaRaw(requestParameters: GetContextAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ContextArea>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getContextArea.');
        }

        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling getContextArea.');
        }

        const queryParameters: any = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/context-area/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContextAreaFromJSON(jsonValue));
    }

    /**
     * Get the context area information. Context area information includes elements and microfrontneds needed for that elements. Actual content is depending on the path - provided as an input  and the user  role determined on the server side. 
     * Get the context area information. 
     */
    async getContextArea(requestParameters: GetContextAreaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ContextArea> {
        const response = await this.getContextAreaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the static configuration of the application context areas. Holds a sum of all microfrontends and web components. Can be beneficial if logic of the frontend is simple and static, and in cases such as development or testing. 
     * Get the static information about all resources and context areas. 
     */
    async getStaticConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StaticConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/static-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StaticConfigFromJSON(jsonValue));
    }

    /**
     * Get the static configuration of the application context areas. Holds a sum of all microfrontends and web components. Can be beneficial if logic of the frontend is simple and static, and in cases such as development or testing. 
     * Get the static information about all resources and context areas. 
     */
    async getStaticConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StaticConfig> {
        const response = await this.getStaticConfigRaw(initOverrides);
        return await response.value();
    }

}

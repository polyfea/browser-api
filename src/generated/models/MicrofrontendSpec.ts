/* tslint:disable */
/* eslint-disable */
/**
 * Polyfea Browser application
 * This is the OpenAPI definition for the Polyfea endpoint serving the context information to the browser client. The client is requesting context information from the backend typically  when approaching the `<polyfea-context>` element. The context information is then used to render the UI of the application. 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MicrofrontendResource } from './MicrofrontendResource';
import {
    MicrofrontendResourceFromJSON,
    MicrofrontendResourceFromJSONTyped,
    MicrofrontendResourceToJSON,
} from './MicrofrontendResource';

/**
 * Specification of the microfrontend
 * Microfrontend resources are loaded by browser on demand. Each microfrontend consist of a set
 * of resources to be loaded ahead of rendering or parallel to the rendering of microfrontend elements.
 * In addition, the microfrontend can depend on other microfrontends.
 * 
 * @export
 * @interface MicrofrontendSpec
 */
export interface MicrofrontendSpec {
    /**
     * The microfrontend that this microfrontend is depending on. Specification of the dependendencies
     * is provided in the context  area information.
     * 
     * @type {Array<string>}
     * @memberof MicrofrontendSpec
     */
    dependsOn?: Array<string>;
    /**
     * Shorthand for the microfrontend script module resource. The module is loaded by the browser before rendering of elements happens. In case the module has dependencies to other resources, they may be loaded by the module itself, assuming their references are provided as a relative path to the module.
     * @type {string}
     * @memberof MicrofrontendSpec
     */
    module?: string;
    /**
     * The resources to be loaded by the browser. Only resources that needs to be directly loaded in the 
     * document `head` element needs to be specified here, typical examples are fonts, and stylesheets that 
     * are required to be globally available.
     * 
     * @type {Array<MicrofrontendResource>}
     * @memberof MicrofrontendSpec
     */
    resources?: Array<MicrofrontendResource>;
}

/**
 * Check if a given object implements the MicrofrontendSpec interface.
 */
export function instanceOfMicrofrontendSpec(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MicrofrontendSpecFromJSON(json: any): MicrofrontendSpec {
    return MicrofrontendSpecFromJSONTyped(json, false);
}

export function MicrofrontendSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): MicrofrontendSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dependsOn': !exists(json, 'dependsOn') ? undefined : json['dependsOn'],
        'module': !exists(json, 'module') ? undefined : json['module'],
        'resources': !exists(json, 'resources') ? undefined : ((json['resources'] as Array<any>).map(MicrofrontendResourceFromJSON)),
    };
}

export function MicrofrontendSpecToJSON(value?: MicrofrontendSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dependsOn': value.dependsOn,
        'module': value.module,
        'resources': value.resources === undefined ? undefined : ((value.resources as Array<any>).map(MicrofrontendResourceToJSON)),
    };
}


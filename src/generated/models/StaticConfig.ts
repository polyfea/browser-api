/* tslint:disable */
/* eslint-disable */
/**
 * Polyfea Browser application
 * This is the OpenAPI definition for the Polyfea endpoint serving the context information to the browser client. The client is requesting context information from the backend typically  when approaching the `<polyfea-context>` element. The context information is then used to render the UI of the application. 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MicrofrontendSpec } from './MicrofrontendSpec';
import {
    MicrofrontendSpecFromJSON,
    MicrofrontendSpecFromJSONTyped,
    MicrofrontendSpecToJSON,
} from './MicrofrontendSpec';
import type { StaticConfigArea } from './StaticConfigArea';
import {
    StaticConfigAreaFromJSON,
    StaticConfigAreaFromJSONTyped,
    StaticConfigAreaToJSON,
} from './StaticConfigArea';

/**
 * Specification of the static configuration of the application.
 * The static configuration is a compilation of all contexts/paths and their elements, 
 * usefull durring development, testing or for simpler applications.
 * 
 * @export
 * @interface StaticConfig
 */
export interface StaticConfig {
    /**
     * List of context areas and their elements. The context areas are referenced by the name and path regex
     * at which they are rendered. In case of conflict, the first matching context area is used.
     * 
     * @type {Array<StaticConfigArea>}
     * @memberof StaticConfig
     */
    contextAreas?: Array<StaticConfigArea>;
    /**
     * Dictionary of microfrontends. The microfrontends are referenced by their name.
     * 
     * @type {{ [key: string]: MicrofrontendSpec; }}
     * @memberof StaticConfig
     */
    microfrontends: { [key: string]: MicrofrontendSpec; };
}

/**
 * Check if a given object implements the StaticConfig interface.
 */
export function instanceOfStaticConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "microfrontends" in value;

    return isInstance;
}

export function StaticConfigFromJSON(json: any): StaticConfig {
    return StaticConfigFromJSONTyped(json, false);
}

export function StaticConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): StaticConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contextAreas': !exists(json, 'contextAreas') ? undefined : ((json['contextAreas'] as Array<any>).map(StaticConfigAreaFromJSON)),
        'microfrontends': (mapValues(json['microfrontends'], MicrofrontendSpecFromJSON)),
    };
}

export function StaticConfigToJSON(value?: StaticConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contextAreas': value.contextAreas === undefined ? undefined : ((value.contextAreas as Array<any>).map(StaticConfigAreaToJSON)),
        'microfrontends': (mapValues(value.microfrontends, MicrofrontendSpecToJSON)),
    };
}


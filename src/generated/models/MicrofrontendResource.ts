/* tslint:disable */
/* eslint-disable */
/**
 * Polyfea Browser application
 * This is the OpenAPI definition for the Polyfea endpoint serving the context information to the browser client. The client is requesting context information from the backend typically  when approaching the `<polyfea-context>` element. The context information is then used to render the UI of the application. 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The resource required by the microfrontend.
 * The resource is either a script, stylesheet, or any other `link` element. The resource is 
 * loaded by the browser when the microfrontend is requested to be loaded. The resource may be loaded
 * either synchronously or asynchronously.
 * 
 * @export
 * @interface MicrofrontendResource
 */
export interface MicrofrontendResource {
    /**
     * The kind of the resource. The resource is either a script, stylesheet, or any other `link` element.
     * 
     * @type {string}
     * @memberof MicrofrontendResource
     */
    kind?: MicrofrontendResourceKindEnum;
    /**
     * The URL of the resource. The URL is typically relative to the base URL of the application and typically
     * served as subpath of `<base_href>/polyfea/webcomponent/<microfrontend-name>/<resource-path...>`.
     * 
     * @type {string}
     * @memberof MicrofrontendResource
     */
    href?: string;
    /**
     * The attributes to be put on the `link` or `script` element in addition to `rel` and `href` attributes.
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MicrofrontendResource
     */
    attributes?: { [key: string]: string; };
    /**
     * If `true` the browser will wait for the resource to be loaded before finishing loading of the microfrontend.
     * If `false` the browser will load the resource asynchronously and continue with loading and rendering in 
     * between.
     * 
     * @type {boolean}
     * @memberof MicrofrontendResource
     */
    waitOnLoad?: boolean;
}


/**
 * @export
 */
export const MicrofrontendResourceKindEnum = {
    Script: 'script',
    Stylesheet: 'stylesheet',
    Link: 'link'
} as const;
export type MicrofrontendResourceKindEnum = typeof MicrofrontendResourceKindEnum[keyof typeof MicrofrontendResourceKindEnum];


/**
 * Check if a given object implements the MicrofrontendResource interface.
 */
export function instanceOfMicrofrontendResource(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MicrofrontendResourceFromJSON(json: any): MicrofrontendResource {
    return MicrofrontendResourceFromJSONTyped(json, false);
}

export function MicrofrontendResourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): MicrofrontendResource {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'href': !exists(json, 'href') ? undefined : json['href'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'waitOnLoad': !exists(json, 'waitOnLoad') ? undefined : json['waitOnLoad'],
    };
}

export function MicrofrontendResourceToJSON(value?: MicrofrontendResource | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': value.kind,
        'href': value.href,
        'attributes': value.attributes,
        'waitOnLoad': value.waitOnLoad,
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Polyfea Browser application
 * This is the OpenAPI definition for the Polyfea endpoint serving the context information to the browser client. The client is requesting context information from the backend typically  when approaching the `<polyfea-context>` element. The context information is then used to render the UI of the application. 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Specification of the element
 * Elements are the building blocks of the application. Each element shall be a web component that is
 * rendered by the browser. When rendered in context - using e.g. `polyfea-context` element, the element 
 * attribute Ë™context` is set to the context area's name.
 * 
 * @export
 * @interface ElementSpec
 */
export interface ElementSpec {
    /**
     * The name of the microfrontend that the element belongs to. The microfrontend is loaded by the browser
     * before the element is rendered. If not provided, then it is assumed that all resources needed by the
     * element are already loaded by the browser before the element is rendered.
     * 
     * @type {string}
     * @memberof ElementSpec
     */
    microfrontend?: string;
    /**
     * The name of the element - its tag name to be put into document flow.
     * 
     * @type {string}
     * @memberof ElementSpec
     */
    tagName: string;
    /**
     * Attributes of the element to be set when the element is rendered.
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ElementSpec
     */
    attributes?: { [key: string]: string; };
    /**
     * The styles of the element. Intended primary as a fallback for specific 
     * cases, e.g. setting CSS variables.
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ElementSpec
     */
    style?: { [key: string]: string; };
}

/**
 * Check if a given object implements the ElementSpec interface.
 */
export function instanceOfElementSpec(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tagName" in value;

    return isInstance;
}

export function ElementSpecFromJSON(json: any): ElementSpec {
    return ElementSpecFromJSONTyped(json, false);
}

export function ElementSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): ElementSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'microfrontend': !exists(json, 'microfrontend') ? undefined : json['microfrontend'],
        'tagName': json['tagName'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'style': !exists(json, 'style') ? undefined : json['style'],
    };
}

export function ElementSpecToJSON(value?: ElementSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'microfrontend': value.microfrontend,
        'tagName': value.tagName,
        'attributes': value.attributes,
        'style': value.style,
    };
}

